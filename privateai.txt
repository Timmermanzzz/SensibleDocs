# üîê Private AI Integration Guide - Complete Implementation

## üìã Overzicht

Deze guide legt uit hoe de **Private AI API** werkt in het Sensible project en hoe je deze integratie kunt gebruiken in andere applicaties. Private AI biedt automatische PII detectie en redactie voor documenten en tekst.

---

## üöÄ Basis Setup

### 1. API Credentials
```javascript
const PRIVATE_AI_CONFIG = {
  BASE_URL: 'https://api.private-ai.com',
  API_KEY: '57271f9a4cdf47ada3b3848942be0fd9', // Community tier
  VERSION: 'v4',
  ENDPOINTS: {
    TEXT: '/community/v4/process/text',
    FILES: '/community/v4/process/files/base64',
    ENTITIES: '/community/v4/process/entities'
  }
};
```

### 2. Ondersteunde Formaten
- **Documenten**: PDF, DOCX, TXT, HTML
- **Afbeeldingen**: PNG, JPG, JPEG (met OCR)
- **Maximale bestandsgrootte**: 10MB (Community tier)

---

## üìÑ Document Processing - Complete Implementatie

### Frontend: File Upload Handler

```javascript
class PrivateAIDocumentProcessor {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.private-ai.com';
  }

  // Converteer bestand naar base64
  async fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        // Verwijder data:mime/type;base64, prefix
        const base64 = reader.result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  // Bepaal content type
  getContentType(file) {
    const extension = file.name.toLowerCase().split('.').pop();
    const mimeTypes = {
      'pdf': 'application/pdf',
      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'doc': 'application/msword',
      'txt': 'text/plain',
      'html': 'text/html',
      'png': 'image/png',
      'jpg': 'image/jpeg',
      'jpeg': 'image/jpeg'
    };
    return mimeTypes[extension] || file.type || 'application/octet-stream';
  }

  // Valideer bestand
  validateFile(file) {
    const maxSize = 10 * 1024 * 1024; // 10MB
    const supportedTypes = [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/msword',
      'text/plain',
      'image/png',
      'image/jpeg'
    ];

    if (file.size > maxSize) {
      throw new Error(`Bestand te groot. Maximum: ${maxSize / 1024 / 1024}MB`);
    }

    const contentType = this.getContentType(file);
    if (!supportedTypes.includes(contentType)) {
      throw new Error(`Bestandstype niet ondersteund: ${contentType}`);
    }

    return true;
  }

  // Anonimiseer document via Private AI
  async anonymizeDocument(file, options = {}) {
    try {
      // Valideer bestand
      this.validateFile(file);

      // Converteer naar base64
      const fileData = await this.fileToBase64(file);
      const contentType = this.getContentType(file);

      // Configureer verwerking
      const payload = {
        file: {
          data: fileData,
          content_type: contentType
        },
        processing_options: {
          // Entiteiten om te detecteren
          entity_detection: {
            accuracy: options.accuracy || 'standard', // 'standard' of 'high'
            return_entity: true
          },
          // Redactie opties
          redaction: {
            redaction_type: options.redactionType || 'marker', // 'marker', 'synthetic', 'category'
            redact_with: options.redactWith || '[REDACTED]'
          }
        }
      };

      // API call naar Private AI
      const response = await fetch(`${this.baseUrl}/community/v4/process/files/base64`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Private AI Error (${response.status}): ${errorText}`);
      }

      const result = await response.json();
      return {
        success: true,
        originalFile: file,
        processedFile: result.processed_file, // Base64 geanonimiseerd bestand
        entities: result.entities || [], // Gevonden PII entiteiten
        processing_time: result.processing_time,
        stats: {
          entities_found: result.entities?.length || 0,
          file_size_original: file.size,
          file_size_processed: result.processed_file ? atob(result.processed_file).length : 0
        }
      };

    } catch (error) {
      return {
        success: false,
        error: error.message,
        originalFile: file
      };
    }
  }

  // Download verwerkt bestand
  downloadProcessedFile(base64Data, originalFilename, contentType) {
    try {
      // Converteer base64 naar blob
      const byteCharacters = atob(base64Data);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: contentType });

      // Maak download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `anonymized_${originalFilename}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      return true;
    } catch (error) {
      console.error('Download error:', error);
      return false;
    }
  }
}
```

### Gebruik van Document Processor

```javascript
// Initialiseer processor
const processor = new PrivateAIDocumentProcessor('57271f9a4cdf47ada3b3848942be0fd9');

// HTML file input
const fileInput = document.getElementById('file-input');
const uploadBtn = document.getElementById('upload-btn');
const statusDiv = document.getElementById('status');

// Upload handler
uploadBtn.addEventListener('click', () => fileInput.click());

fileInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  try {
    // Toon loading status
    statusDiv.innerHTML = 'üîÑ Bestand wordt geanonimiseerd...';
    uploadBtn.disabled = true;

    // Verwerk bestand
    const result = await processor.anonymizeDocument(file, {
      accuracy: 'high',
      redactionType: 'marker',
      redactWith: '[GEREDACTEERD]'
    });

    if (result.success) {
      // Toon resultaten
      statusDiv.innerHTML = `
        ‚úÖ Bestand succesvol geanonimiseerd!<br>
        üìä ${result.stats.entities_found} PII entiteiten gevonden<br>
        ‚è±Ô∏è Verwerkt in ${result.processing_time}ms
      `;

      // Auto-download geanonimiseerd bestand
      const contentType = processor.getContentType(result.originalFile);
      processor.downloadProcessedFile(
        result.processedFile, 
        result.originalFile.name, 
        contentType
      );

      // Optioneel: toon gevonden entiteiten
      if (result.entities.length > 0) {
        console.log('Gevonden PII entiteiten:', result.entities);
      }

    } else {
      statusDiv.innerHTML = `‚ùå Fout: ${result.error}`;
    }

  } catch (error) {
    statusDiv.innerHTML = `‚ùå Onverwachte fout: ${error.message}`;
  } finally {
    uploadBtn.disabled = false;
  }
});
```

---

## üìù Text Processing - Tekst Anonimisatie

### Text Processor Class

```javascript
class PrivateAITextProcessor {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.private-ai.com';
  }

  // Anonimiseer tekst
  async anonymizeText(text, options = {}) {
    try {
      const payload = {
        text: [text], // Private AI verwacht array van strings
        processing_options: {
          entity_detection: {
            accuracy: options.accuracy || 'standard',
            return_entity: true
          },
          redaction: {
            redaction_type: options.redactionType || 'marker',
            redact_with: options.redactWith || '[REDACTED]'
          }
        }
      };

      const response = await fetch(`${this.baseUrl}/community/v4/process/text`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Private AI Error (${response.status}): ${errorText}`);
      }

      const result = await response.json();
      
      return {
        success: true,
        originalText: text,
        processedText: result.processed_text[0] || '', // Eerste (en enige) resultaat
        entities: result.entities || [],
        processing_time: result.processing_time,
        stats: {
          entities_found: result.entities?.length || 0,
          text_length_original: text.length,
          text_length_processed: (result.processed_text[0] || '').length
        }
      };

    } catch (error) {
      return {
        success: false,
        error: error.message,
        originalText: text
      };
    }
  }

  // Detecteer PII zonder redactie
  async detectPII(text) {
    try {
      const payload = {
        text: [text],
        processing_options: {
          entity_detection: {
            accuracy: 'high',
            return_entity: true
          },
          redaction: {
            redaction_type: 'marker', // We redacteren niet, alleen detectie
            redact_with: '__TEMP__'
          }
        }
      };

      const response = await fetch(`${this.baseUrl}/community/v4/process/text`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      const result = await response.json();
      
      return {
        success: true,
        entities: result.entities || [],
        confidence_scores: result.entities?.map(e => e.confidence) || []
      };

    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
}
```

### Gebruik van Text Processor

```javascript
// Initialiseer text processor
const textProcessor = new PrivateAITextProcessor('57271f9a4cdf47ada3b3848942be0fd9');

// Voorbeeld: Anonimiseer tekst
async function anonymizeUserText() {
  const inputText = document.getElementById('text-input').value;
  
  if (!inputText.trim()) {
    alert('Voer eerst tekst in');
    return;
  }

  try {
    // Anonimiseer tekst
    const result = await textProcessor.anonymizeText(inputText, {
      accuracy: 'high',
      redactionType: 'synthetic', // Gebruik synthetische vervanging
      redactWith: '[VERVANGEN]'
    });

    if (result.success) {
      // Toon resultaten
      document.getElementById('original-text').textContent = result.originalText;
      document.getElementById('processed-text').textContent = result.processedText;
      document.getElementById('entity-count').textContent = result.stats.entities_found;
      
      // Toon gevonden entiteiten
      const entitiesList = document.getElementById('entities-list');
      entitiesList.innerHTML = result.entities.map(entity => `
        <li>
          <strong>${entity.entity_type}</strong>: 
          "${entity.text}" 
          (${Math.round(entity.confidence * 100)}% confidence)
        </li>
      `).join('');

    } else {
      alert(`Fout bij verwerken: ${result.error}`);
    }

  } catch (error) {
    alert(`Onverwachte fout: ${error.message}`);
  }
}

// Voorbeeld: Alleen PII detectie
async function detectPIIOnly() {
  const inputText = document.getElementById('text-input').value;
  
  const result = await textProcessor.detectPII(inputText);
  
  if (result.success) {
    console.log('Gevonden PII entiteiten:', result.entities);
    
    // Highlight PII in tekst
    highlightPIIInText(inputText, result.entities);
  }
}
```

---

## üõ†Ô∏è Backend Proxy Server (Node.js)

Voor productie-omgevingen wil je vaak een proxy server gebruiken om je API key te beschermen:

### Express.js Proxy Server

```javascript
// server.js
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import rateLimit from 'express-rate-limit';

const app = express();
const PORT = process.env.PORT || 3001;

// Configuratie
const PRIVATE_AI_CONFIG = {
  API_KEY: process.env.PRIVATE_AI_KEY || '57271f9a4cdf47ada3b3848942be0fd9',
  BASE_URL: 'https://api.private-ai.com',
  TIMEOUT: 30000 // 30 seconden timeout
};

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'https://yourdomain.com'],
  credentials: true
}));

app.use(express.json({ limit: '12mb' })); // Voor grote bestanden
app.use(express.urlencoded({ extended: true, limit: '12mb' }));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minuten
  max: 100, // Maximum 100 requests per 15 minuten
  message: { error: 'Te veel requests. Probeer later opnieuw.' }
});
app.use('/api/', limiter);

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Document anonymization endpoint
app.post('/api/anonymize-document', async (req, res) => {
  try {
    const { fileData, contentType, options = {} } = req.body;

    // Validatie
    if (!fileData || !contentType) {
      return res.status(400).json({ 
        error: 'fileData en contentType zijn verplicht' 
      });
    }

    // Bereid payload voor
    const payload = {
      file: {
        data: fileData,
        content_type: contentType
      },
      processing_options: {
        entity_detection: {
          accuracy: options.accuracy || 'standard',
          return_entity: true
        },
        redaction: {
          redaction_type: options.redactionType || 'marker',
          redact_with: options.redactWith || '[REDACTED]'
        }
      }
    };

    // Call Private AI
    console.log(`üìÑ Processing document: ${contentType}`);
    const startTime = Date.now();

    const response = await fetch(`${PRIVATE_AI_CONFIG.BASE_URL}/community/v4/process/files/base64`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': PRIVATE_AI_CONFIG.API_KEY,
        'User-Agent': 'YourApp/1.0.0'
      },
      body: JSON.stringify(payload),
      timeout: PRIVATE_AI_CONFIG.TIMEOUT
    });

    const processingTime = Date.now() - startTime;

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Private AI Error: ${response.status} - ${errorText}`);
      return res.status(response.status).json({ 
        error: `Private AI service error: ${errorText}` 
      });
    }

    const result = await response.json();
    
    // Log success
    console.log(`‚úÖ Document processed successfully in ${processingTime}ms`);
    console.log(`üìä Found ${result.entities?.length || 0} PII entities`);

    // Return result
    res.json({
      success: true,
      processed_file: result.processed_file,
      entities: result.entities || [],
      processing_time: processingTime,
      stats: {
        entities_found: result.entities?.length || 0,
        api_processing_time: result.processing_time
      }
    });

  } catch (error) {
    console.error('‚ùå Server error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Text anonymization endpoint
app.post('/api/anonymize-text', async (req, res) => {
  try {
    const { text, options = {} } = req.body;

    if (!text || typeof text !== 'string') {
      return res.status(400).json({ 
        error: 'text parameter is verplicht en moet een string zijn' 
      });
    }

    if (text.length > 10000) {
      return res.status(400).json({ 
        error: 'Tekst te lang. Maximum 10.000 karakters.' 
      });
    }

    const payload = {
      text: [text],
      processing_options: {
        entity_detection: {
          accuracy: options.accuracy || 'standard',
          return_entity: true
        },
        redaction: {
          redaction_type: options.redactionType || 'marker',
          redact_with: options.redactWith || '[REDACTED]'
        }
      }
    };

    console.log(`üìù Processing text: ${text.substring(0, 50)}...`);
    const startTime = Date.now();

    const response = await fetch(`${PRIVATE_AI_CONFIG.BASE_URL}/community/v4/process/text`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': PRIVATE_AI_CONFIG.API_KEY,
        'User-Agent': 'YourApp/1.0.0'
      },
      body: JSON.stringify(payload),
      timeout: PRIVATE_AI_CONFIG.TIMEOUT
    });

    const processingTime = Date.now() - startTime;

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Private AI Error: ${response.status} - ${errorText}`);
      return res.status(response.status).json({ 
        error: `Private AI service error: ${errorText}` 
      });
    }

    const result = await response.json();

    console.log(`‚úÖ Text processed successfully in ${processingTime}ms`);
    console.log(`üìä Found ${result.entities?.length || 0} PII entities`);

    res.json({
      success: true,
      original_text: text,
      processed_text: result.processed_text[0] || '',
      entities: result.entities || [],
      processing_time: processingTime,
      stats: {
        entities_found: result.entities?.length || 0,
        text_length_original: text.length,
        text_length_processed: (result.processed_text[0] || '').length
      }
    });

  } catch (error) {
    console.error('‚ùå Server error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Private AI Proxy Server running on port ${PORT}`);
  console.log(`üìö API Documentation: http://localhost:${PORT}/docs`);
  console.log(`üîß Health check: http://localhost:${PORT}/health`);
});

export default app;
```

### Frontend Client voor Proxy

```javascript
// frontend-client.js
class PrivateAIProxyClient {
  constructor(proxyBaseUrl = 'http://localhost:3001') {
    this.baseUrl = proxyBaseUrl;
  }

  async anonymizeDocument(file, options = {}) {
    try {
      // Converteer bestand naar base64
      const fileData = await this.fileToBase64(file);
      const contentType = this.getContentType(file);

      const response = await fetch(`${this.baseUrl}/api/anonymize-document`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          fileData,
          contentType,
          options
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Unknown error');
      }

      return await response.json();

    } catch (error) {
      throw new Error(`Document anonymization failed: ${error.message}`);
    }
  }

  async anonymizeText(text, options = {}) {
    try {
      const response = await fetch(`${this.baseUrl}/api/anonymize-text`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text,
          options
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Unknown error');
      }

      return await response.json();

    } catch (error) {
      throw new Error(`Text anonymization failed: ${error.message}`);
    }
  }

  // Helper methods
  async fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result.split(',')[1]);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  getContentType(file) {
    const extension = file.name.toLowerCase().split('.').pop();
    const mimeTypes = {
      'pdf': 'application/pdf',
      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'txt': 'text/plain'
    };
    return mimeTypes[extension] || file.type || 'application/octet-stream';
  }
}

// Gebruik
const client = new PrivateAIProxyClient('http://localhost:3001');

// Document anonymiseren
const file = document.getElementById('file-input').files[0];
const result = await client.anonymizeDocument(file, {
  accuracy: 'high',
  redactionType: 'synthetic'
});

// Tekst anonymiseren
const textResult = await client.anonymizeText('Mijn naam is Jan Jansen en mijn email is jan@example.com', {
  redactionType: 'marker',
  redactWith: '[VERVANGEN]'
});
```

---

## üìä Entiteit Types die Private AI detecteert

```javascript
const PRIVATE_AI_ENTITY_TYPES = {
  // Persoonlijke identifiers
  'PERSON': 'Volledige naam',
  'EMAIL': 'Email adres',
  'PHONE_NUMBER': 'Telefoonnummer',
  'SSN': 'Burgerservicenummer (US/NL)',
  'PASSPORT': 'Paspoortnummer',
  'DRIVER_LICENSE': 'Rijbewijsnummer',
  
  // Financi√´le gegevens
  'CREDIT_CARD': 'Creditcardnummer',
  'BANK_ACCOUNT': 'Bankrekeningnummer',
  'IBAN': 'IBAN nummer',
  'ROUTING_NUMBER': 'Routingnummer',
  
  // Locatie gegevens
  'ADDRESS': 'Volledig adres',
  'CITY': 'Stad',
  'STATE': 'Provincie/staat',
  'ZIP_CODE': 'Postcode',
  'COUNTRY': 'Land',
  
  // Medische gegevens
  'MEDICAL_RECORD_NUMBER': 'Medisch dossiernummer',
  'HEALTH_PLAN_ID': 'Zorgverzekeringsnummer',
  'DRUG': 'Medicijnnaam',
  'MEDICAL_CONDITION': 'Medische aandoening',
  
  // Organisatie gegevens
  'ORGANIZATION': 'Organisatienaam',
  'TITLE': 'Functietitel',
  'DEPARTMENT': 'Afdeling',
  
  // Internet & technisch
  'URL': 'Website URL',
  'IP_ADDRESS': 'IP adres',
  'MAC_ADDRESS': 'MAC adres',
  'USERNAME': 'Gebruikersnaam',
  
  // Datum en tijd
  'DATE': 'Datum',
  'TIME': 'Tijd',
  'AGE': 'Leeftijd',
  
  // Custom/Nederlandse toevoegingen
  'BSN': 'Burgerservicenummer',
  'KVK': 'KvK nummer',
  'IBAN_NL': 'Nederlandse IBAN'
};
```

---

## ‚öôÔ∏è Configuratie Opties

```javascript
const PROCESSING_OPTIONS = {
  // Nauwkeurigheid instelling
  accuracy: {
    'standard': 'Snelle verwerking, goede nauwkeurigheid',
    'high': 'Langzamere verwerking, hoogste nauwkeurigheid'
  },
  
  // Redactie types
  redaction_type: {
    'marker': 'Vervang met placeholder tekst (bijv. [REDACTED])',
    'synthetic': 'Vervang met synthetische maar realistische data',
    'category': 'Vervang met categorie naam (bijv. [PERSON], [EMAIL])',
    'remove': 'Verwijder de tekst volledig'
  },
  
  // Entity filtering
  entity_detection: {
    enable_all: true, // Detecteer alle entiteit types
    allowed_entities: ['PERSON', 'EMAIL', 'PHONE_NUMBER'], // Of specificeer welke
    blocked_entities: ['ORGANIZATION'], // Blokkeer specifieke types
    minimum_confidence: 0.8 // Minimum confidence score (0.0 - 1.0)
  },
  
  // Output opties
  output_options: {
    return_entities: true, // Include lijst van gevonden entiteiten
    return_stats: true, // Include verwerking statistieken
    preserve_formatting: true // Behoud document opmaak waar mogelijk
  }
};
```

---

## üß™ Test Scripts

### Frontend Test Script

```html
<!DOCTYPE html>
<html>
<head>
    <title>Private AI Test</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
        textarea { width: 100%; height: 100px; margin: 10px 0; }
        button { padding: 10px 20px; margin: 5px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        .result { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 4px; }
        .entity { background: #ffe6e6; padding: 2px 6px; margin: 2px; border-radius: 3px; display: inline-block; }
    </style>
</head>
<body>
    <h1>üîê Private AI Integration Test</h1>
    
    <!-- Text Anonymization Test -->
    <div class="section">
        <h2>üìù Text Anonymization</h2>
        <textarea id="text-input" placeholder="Voer tekst in met PII (bijv. 'Mijn naam is Jan Jansen, email: jan@example.com, telefoon: 06-12345678')">Hallo, ik ben Jan Jansen. Mijn email adres is jan.jansen@gmail.com en mijn telefoonnummer is +31 6 1234 5678. Ik woon op de Damrak 123, 1012 LK Amsterdam.</textarea>
        <br>
        <button onclick="anonymizeText()">üîí Anonymize Text</button>
        <button onclick="detectPIIOnly()">üîç Detect PII Only</button>
        
        <div id="text-results"></div>
    </div>
    
    <!-- File Upload Test -->
    <div class="section">
        <h2>üìÑ Document Anonymization</h2>
        <input type="file" id="file-input" accept=".pdf,.docx,.txt" style="margin: 10px 0;">
        <br>
        <button onclick="anonymizeDocument()">üîí Anonymize Document</button>
        
        <div id="file-results"></div>
    </div>
    
    <!-- API Health Check -->
    <div class="section">
        <h2>üè• API Health Check</h2>
        <button onclick="checkAPIHealth()">üîß Test API Connection</button>
        
        <div id="health-results"></div>
    </div>

    <script>
        // Gebruik de eerder gedefinieerde classes
        const textProcessor = new PrivateAITextProcessor('57271f9a4cdf47ada3b3848942be0fd9');
        const docProcessor = new PrivateAIDocumentProcessor('57271f9a4cdf47ada3b3848942be0fd9');
        
        async function anonymizeText() {
            const text = document.getElementById('text-input').value;
            const resultsDiv = document.getElementById('text-results');
            
            if (!text.trim()) {
                resultsDiv.innerHTML = '<div class="result">‚ö†Ô∏è Voer eerst tekst in</div>';
                return;
            }
            
            resultsDiv.innerHTML = '<div class="result">üîÑ Verwerken...</div>';
            
            try {
                const result = await textProcessor.anonymizeText(text, {
                    accuracy: 'high',
                    redactionType: 'marker',
                    redactWith: '[GEREDACTEERD]'
                });
                
                if (result.success) {
                    resultsDiv.innerHTML = `
                        <div class="result">
                            <h3>‚úÖ Succesvol verwerkt</h3>
                            <p><strong>Origineel:</strong><br>${result.originalText}</p>
                            <p><strong>Geanonimiseerd:</strong><br>${result.processedText}</p>
                            <p><strong>Statistieken:</strong><br>
                               üìä ${result.stats.entities_found} PII entiteiten gevonden<br>
                               ‚è±Ô∏è Verwerkt in ${result.processing_time}ms
                            </p>
                            <p><strong>Gevonden entiteiten:</strong><br>
                               ${result.entities.map(e => 
                                   `<span class="entity">${e.entity_type}: "${e.text}" (${Math.round(e.confidence * 100)}%)</span>`
                               ).join(' ')}
                            </p>
                        </div>
                    `;
                } else {
                    resultsDiv.innerHTML = `<div class="result">‚ùå Fout: ${result.error}</div>`;
                }
            } catch (error) {
                resultsDiv.innerHTML = `<div class="result">üí• Onverwachte fout: ${error.message}</div>`;
            }
        }
        
        async function detectPIIOnly() {
            const text = document.getElementById('text-input').value;
            const resultsDiv = document.getElementById('text-results');
            
            resultsDiv.innerHTML = '<div class="result">üîç Detecteren...</div>';
            
            try {
                const result = await textProcessor.detectPII(text);
                
                if (result.success) {
                    resultsDiv.innerHTML = `
                        <div class="result">
                            <h3>üîç PII Detectie Resultaten</h3>
                            <p><strong>Gevonden entiteiten:</strong> ${result.entities.length}</p>
                            ${result.entities.map(e => 
                                `<div class="entity">
                                   <strong>${e.entity_type}</strong>: "${e.text}" 
                                   (Positie: ${e.start}-${e.end}, Confidence: ${Math.round(e.confidence * 100)}%)
                                 </div>`
                            ).join('')}
                        </div>
                    `;
                } else {
                    resultsDiv.innerHTML = `<div class="result">‚ùå Fout: ${result.error}</div>`;
                }
            } catch (error) {
                resultsDiv.innerHTML = `<div class="result">üí• Fout: ${error.message}</div>`;
            }
        }
        
        async function anonymizeDocument() {
            const fileInput = document.getElementById('file-input');
            const resultsDiv = document.getElementById('file-results');
            const file = fileInput.files[0];
            
            if (!file) {
                resultsDiv.innerHTML = '<div class="result">‚ö†Ô∏è Selecteer eerst een bestand</div>';
                return;
            }
            
            resultsDiv.innerHTML = '<div class="result">üîÑ Document wordt verwerkt...</div>';
            
            try {
                const result = await docProcessor.anonymizeDocument(file, {
                    accuracy: 'high',
                    redactionType: 'marker'
                });
                
                if (result.success) {
                    resultsDiv.innerHTML = `
                        <div class="result">
                            <h3>‚úÖ Document succesvol geanonimiseerd</h3>
                            <p><strong>Bestand:</strong> ${result.originalFile.name}</p>
                            <p><strong>Statistieken:</strong><br>
                               üìä ${result.stats.entities_found} PII entiteiten gevonden<br>
                               üìè Origineel: ${(result.stats.file_size_original / 1024).toFixed(1)} KB<br>
                               üìè Verwerkt: ${(result.stats.file_size_processed / 1024).toFixed(1)} KB<br>
                               ‚è±Ô∏è Verwerkt in ${result.processing_time}ms
                            </p>
                            <button onclick="downloadResult('${result.processedFile}', '${result.originalFile.name}', '${docProcessor.getContentType(result.originalFile)}')">
                                üíæ Download Geanonimiseerd Bestand
                            </button>
                        </div>
                    `;
                } else {
                    resultsDiv.innerHTML = `<div class="result">‚ùå Fout: ${result.error}</div>`;
                }
            } catch (error) {
                resultsDiv.innerHTML = `<div class="result">üí• Fout: ${error.message}</div>`;
            }
        }
        
        function downloadResult(base64Data, originalFilename, contentType) {
            docProcessor.downloadProcessedFile(base64Data, originalFilename, contentType);
        }
        
        async function checkAPIHealth() {
            const resultsDiv = document.getElementById('health-results');
            resultsDiv.innerHTML = '<div class="result">üîÑ Testing API connection...</div>';
            
            try {
                // Test met korte tekst
                const testResult = await textProcessor.detectPII('Test text for John Doe');
                
                if (testResult.success) {
                    resultsDiv.innerHTML = `
                        <div class="result">
                            <h3>‚úÖ API Connection Successful</h3>
                            <p>Private AI API is bereikbaar en functioneel</p>
                            <p>Test uitgevoerd op: ${new Date().toLocaleString()}</p>
                        </div>
                    `;
                } else {
                    resultsDiv.innerHTML = `
                        <div class="result">
                            <h3>‚ö†Ô∏è API Issues Detected</h3>
                            <p>Error: ${testResult.error}</p>
                        </div>
                    `;
                }
            } catch (error) {
                resultsDiv.innerHTML = `
                    <div class="result">
                        <h3>‚ùå API Connection Failed</h3>
                        <p>Error: ${error.message}</p>
                        <p>Controleer je internetverbinding en API key</p>
                    </div>
                `;
            }
        }
    </script>
</body>
</html>
```

---

## üìö Package.json voor Node.js Project

```json
{
  "name": "private-ai-integration",
  "version": "1.0.0",
  "description": "Private AI API integration voor PII detection en anonymization",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "node test/test-api.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "node-fetch": "^3.3.2",
    "express-rate-limit": "^6.7.0",
    "helmet": "^7.0.0",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "keywords": [
    "pii",
    "privacy",
    "anonymization",
    "private-ai",
    "gdpr"
  ],
  "author": "Jouw Naam",
  "license": "MIT"
}
```

---

## üîê Environment Variables (.env)

```env
# Private AI Configuration
PRIVATE_AI_KEY=57271f9a4cdf47ada3b3848942be0fd9
PRIVATE_AI_BASE_URL=https://api.private-ai.com

# Server Configuration
PORT=3001
NODE_ENV=production

# Security
CORS_ORIGIN=https://yourdomain.com
API_RATE_LIMIT=100

# Logging
LOG_LEVEL=info
LOG_FILE=private-ai-proxy.log
```

---

## üöÄ Quick Start Commands

```bash
# 1. Clone en setup
git clone your-repo
cd private-ai-integration
npm install

# 2. Configureer environment
cp .env.example .env
# Edit .env met jouw Private AI API key

# 3. Start development server
npm run dev

# 4. Test de API
curl -X POST http://localhost:3001/health

# 5. Test met tekst
curl -X POST http://localhost:3001/api/anonymize-text \
  -H "Content-Type: application/json" \
  -d '{"text": "Mijn naam is Jan Jansen", "options": {"redactionType": "marker"}}'
```

---

## üìû Support & Documentatie

- **Private AI Documentation**: https://docs.private-ai.com/
- **Community API Limits**: 1000 requests/maand (gratis tier)
- **Pricing**: https://private-ai.com/pricing
- **Status Page**: https://status.private-ai.com/

---

Deze guide geeft je alles wat je nodig hebt om Private AI te integreren in je eigen applicaties! üéâ